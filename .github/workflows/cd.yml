name: Continuous Deployment

# This workflow automates the deployment process to staging and production environments,
# addressing the requirement:
# "Automate the deployment of applications to staging and production environments,
# ensuring rapid and reliable updates."
# Location: Technical Specification/4.6 User and System Management

on:
  push:
    branches:
      - main
      - 'release/*'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository to access code for building Docker images.
      # External Dependency: actions/checkout version v2
      - name: Checkout repository
        uses: actions/checkout@v2  # v2

      # Step 2: Set up Docker Buildx for multi-platform image building.
      # External Dependency: docker/setup-buildx-action version v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1  # v1

      # Step 3: Log in to Docker registry to push images.
      # External Dependency: docker/login-action version v1
      - name: Log in to Docker registry
        uses: docker/login-action@v1  # v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker images for each backend service.
      # Addresses requirement for rapid updates to services.
      # Internal Dependencies: Dockerfiles for all backend services
      # External Dependency: docker/build-push-action version v2
      - name: Build and Push Docker Images
        uses: docker/build-push-action@v2  # v2
        with:
          push: true
          concurrent_jobs: 6
          includes: |
            src/backend/authentication_service/Dockerfile
            src/backend/authorization_service/Dockerfile
            src/backend/incident_management_service/Dockerfile
            src/backend/playbook_engine/Dockerfile
            src/backend/ai_recommendation_engine/Dockerfile
            src/backend/notification_service/Dockerfile
          tags: |
            ${{ env.DOCKER_REGISTRY }}/authentication_service:latest
            ${{ env.DOCKER_REGISTRY }}/authorization_service:latest
            ${{ env.DOCKER_REGISTRY }}/incident_management_service:latest
            ${{ env.DOCKER_REGISTRY }}/playbook_engine:latest
            ${{ env.DOCKER_REGISTRY }}/ai_recommendation_engine:latest
            ${{ env.DOCKER_REGISTRY }}/notification_service:latest

  deploy:
    name: Deploy Infrastructure with Terraform
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository to access Terraform configurations.
      # External Dependency: actions/checkout version v2
      - name: Checkout repository
        uses: actions/checkout@v2  # v2

      # Step 2: Set up Terraform CLI for deployment.
      # External Dependency: hashicorp/setup-terraform version v1
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1  # v1
        with:
          terraform_wrapper: false

      # Step 3: Initialize Terraform configuration.
      # Internal Dependency: infrastructure/terraform/main.tf
      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init

      # Step 4: Apply Terraform plan to deploy infrastructure.
      # Addresses requirement for automating infrastructure deployment.
      # Location: Technical Specification/4.6 User and System Management
      # Internal Dependency: infrastructure/terraform/main.tf
      - name: Terraform Apply
        working-directory: infrastructure/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: terraform apply -auto-approve